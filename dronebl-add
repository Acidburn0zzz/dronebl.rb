#!/usr/bin/env ruby
# copyright Rylee Fowler 2014
# see LICENSE for more details
require './dronebl-client.rb'
require 'resolv'
require 'optparse'
class Options
  attr_reader :read_from_stdin, :key_str, :key_file, :type, :comment, :dry_run,
    :use_key_file, :no_check
  attr_accessor :ips
  def initialize
    @key_file = File.expand_path "~/.droneblkey"
    @ips = []
    @opt_parser = OptionParser.new do |opts|
      opts.banner = "Usage: #{$0} [options]"
      opts.separator ""
      opts.separator "Options available:"
      opts.on('-I', '--ips [ip1,ip2,ip3,...]', Array, 'Read in IPs.') do |list|
        @ips += list
      end
      opts.on('-s', '--stdin', 'Read a newline-delimited list of IPs from STDIN') do
        @read_from_stdin = true
      end
      opts.on('-k', '--key KEY', String, 'Use KEY as your DroneBL RPC2 key') do |key|
        @key_str = key
      end
      opts.on('-f', '--keyfile [FILE_PATH]', 'Read the file at FILE_PATH and use it as the RPC key') do |path|
        @use_key_file = true
        @key_file = path
      end
      opts.on('-t', '--type TYPE', String, 'Mark submissions as TYPE. Valid types are as follows: ', DroneBL::TYPES.map { |k, v| "#{k} : #{v}"}.join("\n")) do |type|
        @type = type
      end
      opts.on('-c', '--comment [COMMENT]', String, 'Attach the given comment to the listings.') do |comment|
        @comment = comment
      opts.on('-u', '--use-key-file', 'Use the default key file located at ~/.droneblkey') do
        @use_key_file = true
      end
      opts.on('-d', '--dry-run', 'Prints the query to be run to STDOUT instead of sending it as a query to the DroneBL RPC service.') do
        @dry_run = true
      end
      #opts.on('-n', '--no-pre-check', 'Do not check DroneBL for the IPs you are about to submit with a lookup before doing it.') do
      #  @no_check = true
      end
      opts.on_tail("-h", "--help", "Show this message") do
        puts opts
        exit
      end

    end
  end
  def parse! args
    @opt_parser.parse! args

    if (@use_key_file && !(File.exists? @key_file)) && @key_str.nil?
      throw ArgumentError, "No key string provided and #{@key_file} does not exist -- unable to authenticate. See http://dronebl.org/rpckey_signup if you need a key."
    end
    if @use_key_file && !@key_str.nil?
      throw ArgumentError, "Trying to use both --use-key-file and --key -- make up your mind!"
    end
    if (@use_key_file)
      DroneBL::key = File.read(File.expand_path(@key_file)).chomp
    else
      DroneBL::key = @key_str
    end
    if @ips.nil? || (@ips.empty? && !@read_from_stdin)
      throw ArgumentError, 'No IPs given and you\'re not reading from stdin -- this is a noop!'
    end
    if @type.nil?
      throw ArgumentError, "No type given! Please read #{$0} --help again."
    end

  end
end

# end option parsing logic, begin program logic
begin
  opts = Options.new
  opts.parse! ARGV

  if opts.read_from_stdin
    while line = STDIN.gets
      opts.ips << line.chomp
    end
  end

  opts.ips.uniq!

  prevalid, ipv6 = opts.ips.partition { |ip| (ip.match(Resolv::IPv6::Regex).nil?) }
  valid, invalid = prevalid.partition { |ip| !(ip.match(Resolv::IPv4::Regex).nil?) }
  invalid += ipv6
  if @dry_run
    puts DroneBL::gen_add_query valid
    puts "#{valid.count} IPs will be added as type #{opts.type}#{" with comment '#{opts.comment if opts.comment}'."
  else
    response = DroneBL::add(valid, type, comment)
    print_table response, opts.long_types
    puts "#{valid.count} IPs looked up. #{response.map { |r| r['ip'] }.uniq.length} unique IPs found in response."
  end
  unless invalid.empty?
    puts "IPs not valid for lookup: "
    invalid.each { |ip| puts ip }
  end
rescue ArgumentError => e
  puts "error in"
  puts e.backtrace
end
